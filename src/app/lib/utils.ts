// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–≥—Ä—ã "–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ë–∞–Ω–∫–∞"

import type { GamePhase, GameRole } from "./types";

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç MM:SS
 */
export function formatTime(seconds: number): string {
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${mins}:${secs.toString().padStart(2, "0")}`;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–∑—ã –∏–≥—Ä—ã
 */
export function getPhaseText(phase: GamePhase): string {
  const phases: Record<GamePhase, string> = {
    roleReveal: "üé≠ –†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ä–æ–ª–µ–π",
    planning: "üìù –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
    action: "‚ö° –î–µ–π—Å—Ç–≤–∏–µ",
    discussion: "üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏–µ",
    voting: "üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ",
    results: "üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
  };
  return phases[phase];
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–∑—ã –∏–≥—Ä—ã
 */
export function getPhaseDescription(phase: GamePhase): string {
  const descriptions: Record<GamePhase, string> = {
    roleReveal: "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ —Å–≤–æ–µ–π —Ä–æ–ª—å—é –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∏–≥—Ä–µ",
    planning: "–ì—Ä–∞–±–∏—Ç–µ–ª–∏ –ø–ª–∞–Ω–∏—Ä—É—é—Ç –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ, –ø–æ–ª–∏—Ü–∏—è –≥–æ—Ç–æ–≤–∏—Ç –∑–∞—â–∏—Ç—É",
    action: "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–æ–ª–∏",
    discussion: "–û–±—Å—É–∂–¥–∞–π—Ç–µ –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –∏—â–∏—Ç–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã—Ö",
    voting: "–ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å",
    results: "–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Ä–∞—É–Ω–¥–∞",
  };
  return descriptions[phase];
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS –∫–ª–∞—Å—Å —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–æ–ª–∏
 */
export function getRoleColor(role: GameRole): string {
  const colors: Record<string, string> = {
    –ì—Ä–∞–±–∏—Ç–µ–ª—å: "text-red-600 dark:text-red-400",
    –ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π: "text-blue-600 dark:text-blue-400",
    –û—Ö—Ä–∞–Ω–Ω–∏–∫: "text-yellow-600 dark:text-yellow-400",
    –ó–∞–ª–æ–∂–Ω–∏–∫: "text-gray-600 dark:text-gray-400",
  };
  return colors[role] || "text-gray-600 dark:text-gray-400";
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –¥–ª—è —Ä–æ–ª–∏
 */
export function getRoleAvatar(role: GameRole): string {
  const avatars: Record<GameRole, string> = {
    –ì—Ä–∞–±–∏—Ç–µ–ª—å: "ü¶π",
    –ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π: "üëÆ",
    –û—Ö—Ä–∞–Ω–Ω–∏–∫: "üíÇ",
    –ó–∞–ª–æ–∂–Ω–∏–∫: "üßë",
  };
  return avatars[role];
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM
 */
export function getCurrentTime(): string {
  return new Date().toLocaleTimeString("ru-RU", {
    hour: "2-digit",
    minute: "2-digit",
  });
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π ID
 */
export function generateId(): number {
  return Math.floor(Math.random() * 1000000);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∫–æ–º–Ω–∞—Ç–∞
 */
export function isRoomFull(
  currentPlayers: number,
  maxPlayers: number,
): boolean {
  return currentPlayers >= maxPlayers;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
 */
export function getRoomFillPercentage(
  currentPlayers: number,
  maxPlayers: number,
): number {
  return Math.round((currentPlayers / maxPlayers) * 100);
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ "–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ë–∞–Ω–∫–∞"

import {
  checkWinCondition,
  createGame,
  discardCard,
  makeNightAttempt,
  nextPhase,
  proposeCardExchange,
  resolveVoting,
  respondToExchange,
  voteForPlayer,
} from "./game-logic";

/**
 * –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
 */
export function exampleGameSession() {
  console.log('üéÆ === –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã "–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ë–∞–Ω–∫–∞" ===\n');

  // –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã —Å 5 –∏–≥—Ä–æ–∫–∞–º–∏
  console.log("üìù –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —Å 5 –∏–≥—Ä–æ–∫–∞–º–∏...");
  let game = createGame(["–ê–ª–∏—Å–∞", "–ë–æ–±", "–ß–∞—Ä–ª–∏", "–î—ç–≤–∏–¥", "–ï–≤–∞"]);

  console.log(`‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!`);
  console.log(`   - –ò–≥—Ä–æ–∫–æ–≤: ${game.players.length}`);
  console.log(
    `   - –ì—Ä–∞–±–∏—Ç–µ–ª–µ–π: ${game.players.filter((p) => p.role === "robber").length}`,
  );
  console.log(
    `   - –ö–ª–∏–µ–Ω—Ç–æ–≤: ${game.players.filter((p) => p.role === "client").length}`,
  );
  console.log(`   - –î–ª–∏–Ω–∞ –∫–æ–¥–∞: ${game.bankCode.digits.size}\n`);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª–∏ –∏ –∫–∞—Ä—Ç—ã
  console.log("üé≠ –†–æ–ª–∏ –∏ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:");
  game.players.forEach((player) => {
    console.log(`   ${player.name}:`);
    console.log(
      `     - –†–æ–ª—å: ${player.role === "robber" ? "ü¶π –ì—Ä–∞–±–∏—Ç–µ–ª—å" : "üè¶ –ö–ª–∏–µ–Ω—Ç"}`,
    );
    if (player.role === "client") {
      console.log(
        `     - –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞: ${player.mainCard.value} (–ø–æ–∑–∏—Ü–∏—è ${player.mainCard.position})`,
      );
    }
    console.log(
      `     - –î–æ–ø. –∫–∞—Ä—Ç—ã: [${player.additionalCards.map((c) => c.value).join(", ")}]`,
    );
  });
  console.log();

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –±–∞–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
  console.log("üè¶ –ö–æ–¥ –±–∞–Ω–∫–∞ (—Å–∫—Ä—ã—Ç –æ—Ç –∏–≥—Ä–æ–∫–æ–≤):");
  const codeArray = Array.from(game.bankCode.digits.entries()).sort(
    (a, b) => a[0] - b[0],
  );
  console.log(
    `   ${codeArray.map(([pos, digit]) => `${digit}(${pos})`).join(" ")}\n`,
  );

  // –®–∞–≥ 2: –§–∞–∑–∞ Setup ‚Üí Card Exchange
  console.log("üîÑ === –†–ê–£–ù–î 1: –û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏ ===\n");
  game = nextPhase(game); // setup ‚Üí card-exchange

  console.log("üí± –ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏...");
  console.log("   (–í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª –±—ã –æ–±–º–µ–Ω)\n");

  // –®–∞–≥ 3: Card Exchange ‚Üí Card Discard
  console.log("üóëÔ∏è === –§–∞–∑–∞ —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç ===\n");
  game = nextPhase(game); // card-exchange ‚Üí card-discard

  console.log("üì§ –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ –æ–¥–Ω–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ:");

  // –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
  game.players.forEach((player) => {
    if (player.additionalCards.length > 0) {
      const cardToDiscard = player.additionalCards[0];
      console.log(`   ${player.name} —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É: ${cardToDiscard.value}`);
      game = discardCard(game, player.id, cardToDiscard.id);
    }
  });

  console.log(
    `\nüîì –†–∞—Å–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: ${game.bankCode.revealed.size} –∏–∑ ${game.bankCode.digits.size}`,
  );
  if (game.bankCode.revealed.size > 0) {
    console.log("   –†–∞—Å–∫—Ä—ã—Ç—ã–µ —Ü–∏—Ñ—Ä—ã:");
    game.bankCode.revealed.forEach((pos) => {
      console.log(`     –ü–æ–∑–∏—Ü–∏—è ${pos}: ${game.bankCode.digits.get(pos)}`);
    });
  }
  console.log();

  // –®–∞–≥ 4: Night phase
  console.log("üåô === –ù–û–ß–¨: –ì—Ä–∞–±–∏—Ç–µ–ª–∏ –≤–∑–ª–∞–º—ã–≤–∞—é—Ç –∫–æ–¥ ===\n");
  game = nextPhase(game); // card-discard ‚Üí night

  const robbers = game.players.filter((p) => p.role === "robber" && p.isAlive);
  console.log(
    `ü¶π –ì—Ä–∞–±–∏—Ç–µ–ª–∏ (${robbers.map((r) => r.name).join(", ")}) –¥–µ–ª–∞—é—Ç –ø–æ–ø—ã—Ç–∫—É...`,
  );

  // –ì—Ä–∞–±–∏—Ç–µ–ª–∏ –≤—ã–±–∏—Ä–∞—é—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ñ—Ä—É –∏ –ø–æ–∑–∏—Ü–∏—é
  const randomDigit = Math.floor(Math.random() * 10);
  const positions = Array.from(game.bankCode.digits.keys());
  const randomPosition =
    positions[Math.floor(Math.random() * positions.length)];

  console.log(`   –ü—Ä–æ–±—É—é—Ç: —Ü–∏—Ñ—Ä–∞ ${randomDigit} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${randomPosition}`);
  game = makeNightAttempt(game, randomDigit, randomPosition);

  const correctDigit = game.bankCode.digits.get(randomPosition);
  const wasCorrect = correctDigit === randomDigit;

  if (wasCorrect) {
    console.log(`   ‚úÖ –£–°–ü–ï–•! –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–∞: ${randomDigit}`);
  } else {
    console.log(
      `   ‚ùå –ù–ï–£–î–ê–ß–ê! –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–∞: ${correctDigit}, –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏: ${randomDigit}`,
    );
  }
  console.log();

  // –®–∞–≥ 5: Day phase
  console.log("‚òÄÔ∏è === –î–ï–ù–¨: –û–±—Å—É–∂–¥–µ–Ω–∏–µ ===\n");
  game = nextPhase(game); // night ‚Üí night-result
  game = nextPhase(game); // night-result ‚Üí day

  console.log("üí¨ –ò–≥—Ä–æ–∫–∏ –æ–±—Å—É–∂–¥–∞—é—Ç –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã—Ö...");
  console.log("   (–í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–∞—Ç)\n");

  // –®–∞–≥ 6: Voting phase
  console.log("üó≥Ô∏è === –ì–û–õ–û–°–û–í–ê–ù–ò–ï ===\n");
  game = nextPhase(game); // day ‚Üí voting

  // –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–∫—Ä–æ–º–µ —Å–µ–±—è)
  console.log("üìä –ò–≥—Ä–æ–∫–∏ –≥–æ–ª–æ—Å—É—é—Ç:");
  game.players.forEach((voter) => {
    if (voter.isAlive) {
      const candidates = game.players.filter(
        (p) => p.isAlive && p.id !== voter.id,
      );
      const target = candidates[Math.floor(Math.random() * candidates.length)];
      game = voteForPlayer(game, voter.id, target.id);
      console.log(`   ${voter.name} ‚Üí ${target.name}`);
    }
  });

  console.log("\nüîç –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤...");
  const votesBefore = game.players.length;
  game = resolveVoting(game);
  const votesAfter = game.players.filter((p) => p.isAlive).length;

  if (votesBefore > votesAfter) {
    const eliminated = game.players.find((p) => !p.isAlive);
    if (eliminated) {
      console.log(
        `‚ùå –ò—Å–∫–ª—é—á–µ–Ω: ${eliminated.name} - ${eliminated.role === "robber" ? "ü¶π –ì—Ä–∞–±–∏—Ç–µ–ª—å" : "üè¶ –ö–ª–∏–µ–Ω—Ç"}`,
      );
    }
  }
  console.log();

  // –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã
  console.log("üèÜ === –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã ===\n");
  game = checkWinCondition(game);

  console.log(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:`);
  console.log(
    `   - –ñ–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${game.players.filter((p) => p.isAlive).length}`,
  );
  console.log(
    `   - –ñ–∏–≤—ã—Ö –≥—Ä–∞–±–∏—Ç–µ–ª–µ–π: ${game.players.filter((p) => p.isAlive && p.role === "robber").length}`,
  );
  console.log(
    `   - –ñ–∏–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${game.players.filter((p) => p.isAlive && p.role === "client").length}`,
  );
  console.log(
    `   - –†–∞—Å–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π –∫–æ–¥–∞: ${game.bankCode.revealed.size}/${game.bankCode.digits.size}`,
  );

  if (game.winner) {
    console.log(
      `\nüéâ –ü–û–ë–ï–î–ê: ${game.winner === "robbers" ? "ü¶π –ì–†–ê–ë–ò–¢–ï–õ–ò" : "üè¶ –ö–õ–ò–ï–ù–¢–´ –ë–ê–ù–ö–ê"}!`,
    );
  } else {
    console.log(`\n‚è≠Ô∏è –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è... –†–∞—É–Ω–¥ ${game.round}`);
  }

  console.log("\nüéÆ === –ö–æ–Ω–µ—Ü –ø—Ä–∏–º–µ—Ä–∞ ===");

  return game;
}

/**
 * –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –º–µ—Ö–∞–Ω–∏–∫
 */
export function testAllMechanics() {
  console.log("üß™ === –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫ ===\n");

  // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤
  console.log("‚úÖ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä");
  [5, 7, 9].forEach((count) => {
    const players = Array.from({ length: count }, (_, i) => `–ò–≥—Ä–æ–∫${i + 1}`);
    const game = createGame(players);
    const robbers = game.players.filter((p) => p.role === "robber").length;
    const clients = game.players.filter((p) => p.role === "client").length;
    console.log(
      `   ${count} –∏–≥—Ä–æ–∫–æ–≤: ${robbers} –≥—Ä–∞–±–∏—Ç–µ–ª–µ–π, ${clients} –∫–ª–∏–µ–Ω—Ç–æ–≤`,
    );
  });
  console.log();

  // –¢–µ—Å—Ç 2: –û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏
  console.log("‚úÖ –¢–µ—Å—Ç 2: –û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏");
  let game = createGame(["A", "B", "C", "D", "E"]);
  game = nextPhase(game); // ‚Üí card-exchange

  const player1 = game.players[0];
  const player2 = game.players[1];
  const card1 = player1.additionalCards[0];
  const card2 = player2.additionalCards[0];

  console.log(
    `   –î–æ –æ–±–º–µ–Ω–∞: ${player1.name} –∏–º–µ–µ—Ç [${player1.additionalCards.map((c) => c.value).join(", ")}]`,
  );
  console.log(
    `   –î–æ –æ–±–º–µ–Ω–∞: ${player2.name} –∏–º–µ–µ—Ç [${player2.additionalCards.map((c) => c.value).join(", ")}]`,
  );

  game = proposeCardExchange(game, player1.id, player2.id, card1.id);
  game = respondToExchange(game, player2.id, 0, true, card2.id);

  console.log(
    `   –ü–æ—Å–ª–µ –æ–±–º–µ–Ω–∞: ${game.players[0].name} –∏–º–µ–µ—Ç [${game.players[0].additionalCards.map((c) => c.value).join(", ")}]`,
  );
  console.log(
    `   –ü–æ—Å–ª–µ –æ–±–º–µ–Ω–∞: ${game.players[1].name} –∏–º–µ–µ—Ç [${game.players[1].additionalCards.map((c) => c.value).join(", ")}]`,
  );
  console.log();

  // –¢–µ—Å—Ç 3: –°–±—Ä–æ—Å –∫–∞—Ä—Ç
  console.log("‚úÖ –¢–µ—Å—Ç 3: –°–±—Ä–æ—Å –∫–∞—Ä—Ç –∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞");
  game = nextPhase(game); // ‚Üí card-discard

  const beforeRevealed = game.bankCode.revealed.size;
  game = discardCard(
    game,
    game.players[0].id,
    game.players[0].additionalCards[0].id,
  );
  const afterRevealed = game.bankCode.revealed.size;

  console.log(`   –†–∞—Å–∫—Ä—ã—Ç–æ –¥–æ: ${beforeRevealed}, –ø–æ—Å–ª–µ: ${afterRevealed}`);
  console.log();

  // –¢–µ—Å—Ç 4: –ù–æ—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
  console.log("‚úÖ –¢–µ—Å—Ç 4: –ù–æ—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–∑–ª–æ–º–∞");
  game = nextPhase(game); // ‚Üí night

  const pos = Array.from(game.bankCode.digits.keys())[0];
  const correctDigit = game.bankCode.digits.get(pos)!;
  const _wrongDigit = (correctDigit + 1) % 10;

  // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
  const before = game.bankCode.revealed.size;
  game = makeNightAttempt(game, correctDigit, pos);
  const after = game.bankCode.revealed.size;

  console.log(
    `   –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: ${correctDigit} –Ω–∞ ${pos} ‚Üí —Ä–∞—Å–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: ${before} ‚Üí ${after}`,
  );
  console.log();

  // –¢–µ—Å—Ç 5: –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
  console.log("‚úÖ –¢–µ—Å—Ç 5: –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ");
  game = nextPhase(game); // ‚Üí night-result
  game = nextPhase(game); // ‚Üí day
  game = nextPhase(game); // ‚Üí voting

  const aliveBefore = game.players.filter((p) => p.isAlive).length;

  // –í—Å–µ –≥–æ–ª–æ—Å—É—é—Ç –∑–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  game.players.forEach((voter) => {
    if (voter.isAlive) {
      game = voteForPlayer(game, voter.id, game.players[0].id);
    }
  });

  game = resolveVoting(game);
  const aliveAfter = game.players.filter((p) => p.isAlive).length;

  console.log(`   –ò–≥—Ä–æ–∫–æ–≤ –¥–æ: ${aliveBefore}, –ø–æ—Å–ª–µ: ${aliveAfter}`);
  console.log();

  // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
  console.log("‚úÖ –¢–µ—Å—Ç 6: –£—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã");

  // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–±–µ–¥—É –≥—Ä–∞–±–∏—Ç–µ–ª–µ–π (—Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤–µ—Å—å –∫–æ–¥)
  game.bankCode.digits.forEach((_, pos) => {
    game.bankCode.revealed.add(pos);
  });

  game = checkWinCondition(game);
  console.log(`   –í–µ—Å—å –∫–æ–¥ —Ä–∞—Å–∫—Ä—ã—Ç ‚Üí –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${game.winner || "–Ω–µ—Ç"}`);
  console.log();

  console.log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!\n");
}
